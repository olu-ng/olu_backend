# name: .NET CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🧾 Checkout code
#         uses: actions/checkout@v4

#       - name: 🛠️ Setup .NET SDK
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: '9.0.x'

#       - name: 📦 Restore dependencies
#         run: dotnet restore

#       - name: 🔨 Build (Local Check)
#         run: dotnet build --configuration Release --no-restore

#       - name: 🧪 Run tests
#         run: dotnet test --no-build --verbosity normal

#       - name: 🚀 Deploy Full Source to Lightsail & Restart App
#         run: |
#           echo "🔐 Setting up SSH key"
#           mkdir -p ~/.ssh
#           echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa

#           echo "📁 Ensuring remote source directory exists"
#           ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} \
#             "sudo mkdir -p /opt/olu_backend/source && sudo chown -R \$USER:\$USER /opt/olu_backend"

#           echo "📤 Uploading full project to server"
#           rsync -avz --exclude 'bin' --exclude 'obj' --exclude '.git' \
#             -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ \
#             ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/opt/olu_backend/source/

#           echo "🌀 Building & restarting on server"
#           ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} << 'EOF'
#             set -e
#             cd /opt/olu_backend/source

#             echo "🔄 Restoring & building"
#             dotnet restore
#             dotnet build --configuration Release

#             echo "📦 Running EF migration (if any)"
#             dotnet ef database update || echo "⚠️ Skipped migration"

#             echo "🚦 Restarting kestrel-oluapp service"
#             sudo systemctl stop kestrel-oluapp || true
#             sudo systemctl daemon-reexec
#             sudo systemctl restart kestrel-oluapp
#             echo "✅ App restarted successfully" 
#           EOF





name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🔨 Build (Local Validation)
        run: dotnet build --configuration Release --no-restore

      - name: 🧪 Run tests
        run: dotnet test --no-build --verbosity normal

      - name: 🚀 Deploy Full Source to Lightsail & Rebuild with Docker Compose
        run: |
          echo "🔐 Setting up SSH key"
          mkdir -p ~/.ssh
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "📁 Ensuring remote project directory exists"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} \
            "sudo mkdir -p /opt/olu_backend/source && sudo chown -R \$USER:\$USER /opt/olu_backend"

          echo "📤 Uploading project files (excluding unnecessary)"
          rsync -avz --delete \
            --exclude 'bin' --exclude 'obj' --exclude '.git' \
            -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ \
            ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }}:/opt/olu_backend/source/

          echo "🐳 Running Docker Compose cleanup and rebuild on remote server"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.LIGHTSAIL_USER }}@${{ secrets.LIGHTSAIL_HOST }} << 'EOF'
            set -e
            cd /opt/olu_backend/source

            echo "🧼 Cleaning up old Docker images, volumes, and cache"
            docker compose down || true
            docker builder prune -af || true
            docker system prune -af || true
            docker volume prune -f || true

            echo "📦 Rebuilding and restarting containers"
            docker compose build --no-cache
            docker compose up -d

            echo "✅ Deployment complete!"
          EOF
